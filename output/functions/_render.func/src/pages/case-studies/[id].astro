---
import Layout from '../../layouts/Layout.astro';
import Container from "../../components/Container.astro";
import { caseStudies } from '../../data/caseStudies';
import type { CaseStudy } from '../../data/caseStudies';

export async function getStaticPaths() {
    return caseStudies.map(study => ({
        params: { id: study.id.toString() },
        props: { study }
    }));
}

const { id } = Astro.params;
const study = caseStudies.find(s => s.id.toString() === id);

// Handle 404 if study not found
if (!study) {
    return Astro.redirect('/404');
}
---

<Layout title={`${study.title} | MustMedia`}>
    <div class="bg-[#0B0F19] text-white min-h-screen">
        <Container>
            <div class="py-24">
                <!-- Back Button -->
                <a href="/case-studies" class="inline-flex items-center gap-2 text-zinc-400 hover:text-white mb-8 transition-colors duration-300">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"/>
                    </svg>
                    Retour aux études de cas
                </a>

                <!-- Category Badge -->
                <div class="mb-8 text-center">
                    <span class="inline-block px-4 py-1 bg-zime-44 text-white rounded-full text-sm">
                        {study.category}
                    </span>
                </div>

                <!-- Title -->
                <h1 class="text-4xl md:text-5xl font-bold text-center mb-8">{study.title}</h1>

                <!-- Description -->
                <p class="text-xl text-zinc-400 text-center max-w-3xl mx-auto mb-12">
                    {study.fullDescription}
                </p>

                <!-- Metrics -->
                <div class="grid grid-cols-1 md:grid-cols-3 gap-8 mb-12">
                    {study.metrics.map(metric => (
                        <div class="bg-[#1A1F2E] rounded-3xl border border-zinc-700 p-6 text-center">
                            <div class="flex items-center justify-center gap-2">
                                <span class="text-3xl font-bold text-zime-44">{metric.value}</span>
                                {metric.trend === 'up' && (
                                    <svg class="w-6 h-6 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18"/>
                                    </svg>
                                )}
                                {metric.trend === 'down' && (
                                    <svg class="w-6 h-6 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"/>
                                    </svg>
                                )}
                            </div>
                            <div class="text-zinc-400 mt-2">{metric.label}</div>
                        </div>
                    ))}
                </div>

                <!-- Tags -->
                <div class="flex flex-wrap justify-center gap-3 mb-12">
                    {study.tags.map(tag => (
                        <span class="px-4 py-1 bg-[#1A1F2E] text-zinc-300 rounded-full text-sm border border-zinc-700">
                            {tag}
                        </span>
                    ))}
                </div>

                <!-- Content Sections -->
                <div class="space-y-12 max-w-3xl mx-auto">
                    {study.challenge && (
                        <div>
                            <h2 class="text-2xl font-bold mb-4 text-white">Le Défi</h2>
                            <div class="text-zinc-400 space-y-4">
                                {study.challenge.split('\n').map((line: string) => (
                                    <p>{line}</p>
                                ))}
                            </div>
                        </div>
                    )}

                    {study.solution && (
                        <div>
                            <h2 class="text-2xl font-bold mb-4 text-white">Notre Solution</h2>
                            <div class="text-zinc-400 space-y-4">
                                {study.solution.split('\n').map((line: string) => (
                                    <p>{line}</p>
                                ))}
                            </div>
                        </div>
                    )}

                    {study.testimonial && (
                        <blockquote class="bg-[#1A1F2E] rounded-3xl p-8 border border-zinc-700">
                            <p class="text-xl italic mb-4 text-zinc-300">"{study.testimonial.quote}"</p>
                            <footer>
                                <div class="font-semibold text-white">{study.testimonial.author}</div>
                                <div class="text-zinc-400">{study.testimonial.position}</div>
                            </footer>
                        </blockquote>
                    )}
                </div>

                {study.monthlyData && (
                    <div class="my-12 p-8 bg-[#1A1F2E] rounded-3xl border border-zinc-700">
                        <h2 class="text-2xl font-bold mb-6 text-center text-white">Croissance sur 6 mois</h2>
                        <canvas class="h-[400px] w-full" id="growthChart"></canvas>
                    </div>
                )}
            </div>
        </Container>
    </div>
</Layout>

<script is:inline define:vars={{ study }}>
if (typeof window !== 'undefined' && study.monthlyData) {
    // Load Chart.js from CDN
    const script = document.createElement('script');
    script.src = 'https://cdn.jsdelivr.net/npm/chart.js';
    script.onload = function() {
        const ctx = document.getElementById('growthChart')?.getContext('2d');
        if (ctx) {
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: study.monthlyData.map(d => d.month),
                    datasets: [
                        {
                            label: 'Revenue',
                            data: study.monthlyData.map(d => d.revenue),
                            borderColor: '#60A5FA',
                            backgroundColor: 'rgba(96, 165, 250, 0.1)',
                            fill: true,
                            tension: 0.4
                        },
                        {
                            label: 'Orders',
                            data: study.monthlyData.map(d => d.orders),
                            borderColor: '#34D399',
                            backgroundColor: 'rgba(52, 211, 153, 0.1)',
                            fill: true,
                            tension: 0.4
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                            labels: {
                                color: '#D1D5DB'
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: '#D1D5DB'
                            }
                        },
                        x: {
                            grid: {
                                display: false
                            },
                            ticks: {
                                color: '#D1D5DB'
                            }
                        }
                    }
                }
            });
        }
    };
    document.head.appendChild(script);
}
</script> 